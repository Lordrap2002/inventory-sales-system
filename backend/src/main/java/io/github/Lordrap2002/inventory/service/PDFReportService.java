package io.github.Lordrap2002.inventory.service;

import io.github.Lordrap2002.inventory.api.dto.DailySalesReportDTO;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.colors.ColorConstants;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

@Service
public class PDFReportService {

    public byte[] generateDailySalesReportPDF(DailySalesReportDTO report) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(baos);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        try {
            PdfFont titleFont = PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD);
            Paragraph title = new Paragraph("Daily Sales Report");
            title.setFont(titleFont);
            title.setFontSize(18);
            document.add(title);

            Paragraph date = new Paragraph("Date: " + report.getDate());
            date.setFontSize(12);
            document.add(date);

            Table table = new Table(3);
            table.setWidth(500);

            PdfFont headerFont = PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD);
            Cell header1 = new Cell().add(new Paragraph("Product"));
            Cell header2 = new Cell().add(new Paragraph("Quantity Sold"));
            Cell header3 = new Cell().add(new Paragraph("Total Amount"));

            header1.setBackgroundColor(ColorConstants.GRAY);
            header2.setBackgroundColor(ColorConstants.GRAY);
            header3.setBackgroundColor(ColorConstants.GRAY);

            table.addHeaderCell(header1);
            table.addHeaderCell(header2);
            table.addHeaderCell(header3);

            for (DailySalesReportDTO.ProductSalesDTO product : report.getProducts()) {
                Cell cell1 = new Cell().add(new Paragraph(product.getProductName()));
                Cell cell2 = new Cell().add(new Paragraph(String.valueOf(product.getQuantitySold())));
                Cell cell3 = new Cell().add(new Paragraph("$" + product.getTotalAmount().toString()));

                table.addCell(cell1);
                table.addCell(cell2);
                table.addCell(cell3);
            }

            document.add(table);

            Paragraph summary = new Paragraph();
            summary.add("Summary:\n");
            summary.add("Total Transactions: " + report.getTotalTransactions() + "\n");
            summary.add("Total Revenue: $" + report.getTotalRevenue().toString());
            document.add(summary);

            Paragraph footer = new Paragraph("Generated by Inventory Sales System");
            footer.setFontSize(10);
            document.add(footer);

        } finally {
            document.close();
        }

        return baos.toByteArray();
    }
}
